{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\index.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let myStore;\n  let toggle = true;\n  let debugStoreHovered = null;\n  let testyArr = [];\n  $: {\n    testyArr = [];\n    for (const key in myStore) {\n      if (myStore.hasOwnProperty(key)) {\n        testyArr.push({ key, val: myStore[key], type: getType(myStore[key]) });\n      }\n    }\n    testyArr.sort(sort_byKey);\n  }\n\n  function sort_byKey(a, b) {\n    var nameA = a.key.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.key.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n\n    // else name are equal\n    return 0;\n  }\n\n  function doToggle() {\n    toggle = !toggle;\n  }\n\n  function getType(val) {\n    return Array.isArray(val) ? \"array\" : typeof val;\n  }\n\n  function displayVal(val) {\n    if (val === null) {\n      return \"null\";\n    } else if (getType(val) === \"function\") {\n      return \"fn()\";\n    } else if (getType(val) === \"object\") {\n      return Object.entries(val).length ? \"view Obj...\" : \"{ }\";\n    } else if (getType(val) === \"array\") {\n      return val.length ? \"view Arr...\" : \"[ ]\";\n    } //\n    else if (getType(val) === \"boolean\") {\n      return val ? \"true\" : \"false\";\n    } else if (getType(val) === \"string\") {\n      return val;\n    } else if (getType(val) === \"number\") {\n      return JSON.stringify(val);\n    }\n  }\n\n  function click(key, val, type) {\n    if (\n      (Object.entries(val).length && type === \"object\") ||\n      (val.length && type === \"array\")\n    ) {\n      if (debugStoreHovered === key) {\n        debugStoreHovered = null;\n      } else {\n        debugStoreHovered = key;\n      }\n    }\n  }\n\n  function displayClass(testy) {\n    let isObject = testy.val ? Object.entries(testy.val).length : false;\n    let accordion = testy.type !== \"string\" ? \"accordion\" : \"\";\n    return testy.val !== [] && testy.val !== null && isObject\n      ? accordion + \" tree_\" + testy.type\n      : \"\";\n  }\n\n  function code_format_null(parentArr, level, optionalIndex) {\n    parentArr.push({\n      output: indent_row(code_format_index(optionalIndex) + \"null\", level),\n      type: \"Null\"\n    });\n  }\n\n  function code_format_undefined(parentArr, level, optionalIndex) {\n    parentArr.push({\n      output: indent_row(code_format_index(optionalIndex) + \"undefined\", level),\n      type: \"Undefined\"\n    });\n  }\n  function code_format_boolean(parentArr, bool, level, optionalIndex) {\n    parentArr.push({\n      output: indent_row(\n        code_format_index(optionalIndex) + (bool ? \"true\" : \"false\"),\n        level\n      ),\n      type: \"Boolean\"\n    });\n  }\n\n  function code_format_string(parentArr, str, level, optionalIndex) {\n    parentArr.push({\n      output: indent_row(\n        code_format_index(optionalIndex) + \"'\" + str + \"'\",\n        level\n      ),\n      type: \"String\"\n    });\n  }\n\n  function code_format_number(parentArr, num, level, optionalIndex) {\n    parentArr.push({\n      output: indent_row(code_format_index(optionalIndex) + num, level),\n      type: \"Number\"\n    });\n  }\n\n  function code_format_symbol(parentArr, sym, level, optionalIndex) {\n    parentArr.push({\n      output: indent_row(\n        code_format_index(optionalIndex) + \"'\" + sym.toString() + \"'\",\n        level\n      ),\n      type: \"Symbol\"\n    });\n  }\n\n  function code_format_function(parentArr, fn, level, optionalIndex) {\n    parentArr.push({\n      output: indent_row(\n        code_format_index(optionalIndex) + \"'\" + fn.name + \"'\",\n        level\n      ),\n      type: \"Function\"\n    });\n  }\n\n  function code_format_array(\n    parentArr,\n    arr,\n    level,\n    optionalIndex,\n    optionalNewLine\n  ) {\n    if (optionalNewLine) {\n      parentArr.push({\n        output: indent_row(code_format_index(optionalIndex), level)\n      });\n    }\n    /*\n      parentArr.push({\n        output: indent_row(\n          \"[  Array (\" + arr.length + \")\",\n          level + (optionalIndex ? 2 : 1)\n        )\n      });\n      arr.map((value, index) =>\n        formatByType(parentArr, value, level + (optionalIndex ? 3 : 2), index)\n      );\n      parentArr.push({\n        output: indent_row(\"]\", level + (optionalIndex ? 2 : 1))\n      });\n    } else {*/\n    parentArr.push({\n      output: indent_row(\n        (optionalNewLine ? \"\" : code_format_index(optionalIndex)) +\n          \"[  Array (\" +\n          arr.length +\n          \")\",\n        level + (optionalIndex ? 1 : 0)\n      )\n    });\n    arr.map((value, index) =>\n      formatByType(\n        parentArr,\n        value,\n        level + (optionalIndex ? 2 : 1),\n        index,\n        true\n      )\n    );\n    parentArr.push({\n      output: indent_row(\"]\", level + (optionalIndex ? 1 : 0))\n    });\n    //}\n  }\n\n  function code_format_object(\n    parentArr,\n    obj,\n    level,\n    optionalIndex,\n    optionalNewLine\n  ) {\n    let object = Object.entries(obj);\n    if (optionalNewLine) {\n      parentArr.push({\n        output: indent_row(code_format_index(optionalIndex), level)\n      });\n    }\n    parentArr.push({\n      output: indent_row(\n        (optionalNewLine ? \"\" : code_format_index(optionalIndex)) +\n          \"{  Object (\" +\n          object.length +\n          \")\",\n        level + (optionalIndex || optionalNewLine ? 1 : 0)\n      )\n    });\n    object.forEach(([key, value], index) => {\n      formatByType(\n        parentArr,\n        value,\n        level + (optionalIndex || optionalNewLine ? 2 : 1),\n        key,\n        true\n      );\n    });\n\n    parentArr.push({\n      output: indent_row(\n        \"}\",\n        level + (optionalIndex || optionalNewLine ? 1 : 0)\n      )\n    });\n  }\n\n  function code_format_unknown(parentArr, level, optionalIndex) {\n    parentArr.push({\n      output: indent_row(\n        code_format_index(optionalIndex) + \"!!unknown!!\",\n        level\n      )\n    });\n  }\n\n  function code_format_index(optionalIndex) {\n    return typeof optionalIndex !== \"undefined\" ? optionalIndex + \": \" : \"\";\n  }\n\n  function indent_row(row, level) {\n    return \" \".repeat(level * 3) + row;\n  }\n\n  function formatByType(\n    parentArr,\n    value,\n    level,\n    optionalIndex,\n    optionalNewLine\n  ) {\n    if (value === null) code_format_null(parentArr, level, optionalIndex);\n    else if (typeof value === \"undefined\")\n      code_format_undefined(parentArr, level, optionalIndex);\n    else if (typeof value === \"boolean\")\n      code_format_boolean(parentArr, value, level, optionalIndex);\n    else if (typeof value === \"string\")\n      code_format_string(parentArr, value, level, optionalIndex);\n    else if (typeof value === \"number\")\n      code_format_number(parentArr, value, level, optionalIndex);\n    else if (typeof value === \"symbol\")\n      code_format_symbol(parentArr, value, level, optionalIndex);\n    else if (typeof value === \"function\")\n      code_format_function(parentArr, value, level, optionalIndex);\n    else if (Array.isArray(value))\n      code_format_array(\n        parentArr,\n        value,\n        level,\n        optionalIndex,\n        optionalNewLine\n      );\n    else if (typeof value === \"object\")\n      code_format_object(\n        parentArr,\n        value,\n        level,\n        optionalIndex,\n        optionalNewLine\n      );\n    else code_format_unknown(parentArr, level, optionalIndex);\n  }\n\n  function valueFormatter(object) {\n    let parentArr = []; //[{ output: '   test:\"test\"', type: \"string\" }];\n    //let test = { test: [\"test\", { test: 1, test2: 2 }], test: 3, test2: 4 };\n    /*let test = {\n      test0: { test5: 1234 },\n      test: \"test\",\n      test2: 123,\n      test3: [123],\n      test4: { test5: 1234 },\n      test5: 2,\n      test6: \"3\",\n      test7: [4, 5, 6]\n    };*/\n    formatByType(parentArr, object, 0);\n\n    let str = \"\";\n    parentArr.map(\n      row =>\n        (str += row.output + (row.type ? \" (\" + row.type + \")\" : \"\") + \"\\n\")\n    );\n    return str;\n  }\n</script>\n\n<style>\n  .wrapper {\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100vw;\n    height: 100vh;\n    padding: 0px;\n    margin: 0px;\n    z-index: 100000000000000000;\n  }\n\n  .tree {\n    position: absolute;\n    right: 0px;\n    top: 0px;\n    width: 500px;\n    height: 100%;\n    background-color: #aaa;\n    z-index: 10000000;\n    overflow: auto;\n    font-size: small;\n\n    margin: 0;\n    font-family: \"Roboto\";\n    font-size: 14px;\n    line-height: 1.3em;\n  }\n\n  .tree table {\n    table-layout: fixed;\n    width: 480px;\n  }\n\n  .tree tr:nth-child(odd) {\n    background-color: #ccc;\n  }\n\n  .treeVal {\n    min-height: 10px;\n    overflow-wrap: break-word;\n    max-width: 480px;\n    overflow: auto;\n    background-color: #666 !important;\n    color: white;\n  }\n\n  .toggle {\n    position: absolute;\n    bottom: 25px;\n    width: 70px;\n    height: 20px;\n    text-align: center;\n    transform: rotate(-90deg);\n    background-color: #aaa;\n    z-index: 10000000;\n\n    margin: 0;\n    font-family: \"Roboto\";\n    font-size: 14px;\n    line-height: 1.3em;\n  }\n\n  .toggleShow {\n    right: 475px;\n  }\n\n  .toggleHide {\n    right: 0px;\n  }\n\n  .accordion {\n    background-color: #666 !important;\n    color: white;\n  }\n\n  pre {\n    margin: 0px;\n  }\n</style>\n\n<div class=\"wrapper\">\n  <div\n    class={toggle ? 'toggle toggleShow' : 'toggle toggleHide'}\n    on:click={doToggle}>\n    {#if toggle}\n      Hide\n      <i class=\"fas fa-chevron-down\" />\n    {:else}\n      Show\n      <i class=\"fas fa-chevron-up\" />\n    {/if}\n  </div>\n  {#if toggle}\n    <div class=\"tree\">\n      <table>\n        <colgroup>\n          <col style=\"width:35%\" />\n          <col style=\"width:10%\" />\n          <col style=\"width:55%\" />\n        </colgroup>\n        {#each testyArr as testy}\n          <tr\n            class={displayClass(testy)}\n            on:click={() => click(testy.key, testy.val, testy.type)}>\n            <td>\n              {#if displayClass(testy)}\n                {#if debugStoreHovered === testy.key}\n                  <i class=\"fas fa-chevron-down\" />\n                {:else}\n                  <i class=\"fas fa-chevron-right\" />\n                {/if}\n              {/if}\n              {displayVal(testy.val)}\n            </td>\n            <td>{testy.type}</td>\n            <td>{testy.key}</td>\n\n          </tr>\n          {#if debugStoreHovered === testy.key}\n            <tr>\n              <!-- only used to keep the odd even shading consistent when opening/closing accordion-->\n              <td colspan=\"3\" class=\"treeVal\" />\n            </tr>\n            <tr class=\"treeVal\">\n              <td colspan=\"3\" class=\"treeVal\">\n                <pre>{valueFormatter(testy.val)}</pre>\n              </td>\n            </tr>\n          {/if}\n        {/each}\n      </table>\n    </div>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAoTE,QAAQ,eAAC,CAAC,AACR,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,kBAAkB,AAC7B,CAAC,AAED,KAAK,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,GAAG,CACV,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,QAAQ,CACjB,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,KAAK,CAEhB,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,QAAQ,CACrB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,KAAK,AACpB,CAAC,AAED,oBAAK,CAAC,KAAK,eAAC,CAAC,AACX,YAAY,CAAE,KAAK,CACnB,KAAK,CAAE,KAAK,AACd,CAAC,AAED,oBAAK,CAAC,iBAAE,WAAW,GAAG,CAAC,AAAC,CAAC,AACvB,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,UAAU,CACzB,SAAS,CAAE,KAAK,CAChB,QAAQ,CAAE,IAAI,CACd,gBAAgB,CAAE,IAAI,CAAC,UAAU,CACjC,KAAK,CAAE,KAAK,AACd,CAAC,AAED,OAAO,eAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,OAAO,MAAM,CAAC,CACzB,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,QAAQ,CAEjB,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,QAAQ,CACrB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,KAAK,AACpB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,KAAK,AACd,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,UAAU,eAAC,CAAC,AACV,gBAAgB,CAAE,IAAI,CAAC,UAAU,CACjC,KAAK,CAAE,KAAK,AACd,CAAC,AAED,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,GAAG,AACb,CAAC"
}