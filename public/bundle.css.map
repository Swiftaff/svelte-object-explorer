{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\Index.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  export let myStore;\r\n  let toggle = true;\r\n  let debugStoreHovered = null;\r\n  let testyArr = [];\r\n  $: {\r\n    testyArr = [];\r\n    for (const key in myStore) {\r\n      if (myStore.hasOwnProperty(key)) {\r\n        testyArr.push({ key, val: myStore[key], type: getType(myStore[key]) });\r\n      }\r\n    }\r\n    testyArr.sort(sort_byKey);\r\n  }\r\n\r\n  function sort_byKey(a, b) {\r\n    var nameA = a.key.toUpperCase(); // ignore upper and lowercase\r\n    var nameB = b.key.toUpperCase(); // ignore upper and lowercase\r\n    if (nameA < nameB) {\r\n      return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1;\r\n    }\r\n\r\n    // else name are equal\r\n    return 0;\r\n  }\r\n\r\n  function doToggle() {\r\n    toggle = !toggle;\r\n  }\r\n\r\n  function getType(val) {\r\n    return Array.isArray(val) ? \"array\" : typeof val;\r\n  }\r\n\r\n  function displayVal(val) {\r\n    if (val === null) {\r\n      return \"null\";\r\n    } else if (getType(val) === \"function\") {\r\n      return \"fn()\";\r\n    } else if (getType(val) === \"object\") {\r\n      return Object.entries(val).length ? \"view Obj...\" : \"{ }\";\r\n    } else if (getType(val) === \"array\") {\r\n      return val.length ? \"view Arr...\" : \"[ ]\";\r\n    } //\r\n    else if (getType(val) === \"boolean\") {\r\n      return val ? \"true\" : \"false\";\r\n    } else if (getType(val) === \"string\") {\r\n      return val;\r\n    } else if (getType(val) === \"number\") {\r\n      return JSON.stringify(val);\r\n    }\r\n  }\r\n\r\n  function click(key, val, type) {\r\n    if (\r\n      (Object.entries(val).length && type === \"object\") ||\r\n      (val.length && type === \"array\")\r\n    ) {\r\n      if (debugStoreHovered === key) {\r\n        debugStoreHovered = null;\r\n      } else {\r\n        debugStoreHovered = key;\r\n      }\r\n    }\r\n  }\r\n\r\n  function displayClass(testy) {\r\n    let isObject = testy.val ? Object.entries(testy.val).length : false;\r\n    let accordion = testy.type !== \"string\" ? \"accordion\" : \"\";\r\n    return testy.val !== [] && testy.val !== null && isObject\r\n      ? accordion + \" tree_\" + testy.type\r\n      : \"\";\r\n  }\r\n\r\n  function code_format_null(parentArr, level, optionalIndex) {\r\n    parentArr.push({\r\n      output: indent_row(code_format_index(optionalIndex) + \"null\", level),\r\n      type: \"Null\"\r\n    });\r\n  }\r\n\r\n  function code_format_undefined(parentArr, level, optionalIndex) {\r\n    parentArr.push({\r\n      output: indent_row(code_format_index(optionalIndex) + \"undefined\", level),\r\n      type: \"Undefined\"\r\n    });\r\n  }\r\n  function code_format_boolean(parentArr, bool, level, optionalIndex) {\r\n    parentArr.push({\r\n      output: indent_row(\r\n        code_format_index(optionalIndex) + (bool ? \"true\" : \"false\"),\r\n        level\r\n      ),\r\n      type: \"Boolean\"\r\n    });\r\n  }\r\n\r\n  function code_format_string(parentArr, str, level, optionalIndex) {\r\n    parentArr.push({\r\n      output: indent_row(\r\n        code_format_index(optionalIndex) + \"'\" + str + \"'\",\r\n        level\r\n      ),\r\n      type: \"String\"\r\n    });\r\n  }\r\n\r\n  function code_format_number(parentArr, num, level, optionalIndex) {\r\n    parentArr.push({\r\n      output: indent_row(code_format_index(optionalIndex) + num, level),\r\n      type: \"Number\"\r\n    });\r\n  }\r\n\r\n  function code_format_symbol(parentArr, sym, level, optionalIndex) {\r\n    parentArr.push({\r\n      output: indent_row(\r\n        code_format_index(optionalIndex) + \"'\" + sym.toString() + \"'\",\r\n        level\r\n      ),\r\n      type: \"Symbol\"\r\n    });\r\n  }\r\n\r\n  function code_format_function(parentArr, fn, level, optionalIndex) {\r\n    parentArr.push({\r\n      output: indent_row(\r\n        code_format_index(optionalIndex) + \"'\" + fn.name + \"'\",\r\n        level\r\n      ),\r\n      type: \"Function\"\r\n    });\r\n  }\r\n\r\n  function code_format_array(\r\n    parentArr,\r\n    arr,\r\n    level,\r\n    optionalIndex,\r\n    optionalNewLine\r\n  ) {\r\n    if (optionalNewLine) {\r\n      parentArr.push({\r\n        output: indent_row(code_format_index(optionalIndex), level)\r\n      });\r\n    }\r\n    /*\r\n      parentArr.push({\r\n        output: indent_row(\r\n          \"[  Array (\" + arr.length + \")\",\r\n          level + (optionalIndex ? 2 : 1)\r\n        )\r\n      });\r\n      arr.map((value, index) =>\r\n        formatByType(parentArr, value, level + (optionalIndex ? 3 : 2), index)\r\n      );\r\n      parentArr.push({\r\n        output: indent_row(\"]\", level + (optionalIndex ? 2 : 1))\r\n      });\r\n    } else {*/\r\n    parentArr.push({\r\n      output: indent_row(\r\n        (optionalNewLine ? \"\" : code_format_index(optionalIndex)) +\r\n          \"[  Array (\" +\r\n          arr.length +\r\n          \")\",\r\n        level + (optionalIndex ? 1 : 0)\r\n      )\r\n    });\r\n    arr.map((value, index) =>\r\n      formatByType(\r\n        parentArr,\r\n        value,\r\n        level + (optionalIndex ? 2 : 1),\r\n        index,\r\n        true\r\n      )\r\n    );\r\n    parentArr.push({\r\n      output: indent_row(\"]\", level + (optionalIndex ? 1 : 0))\r\n    });\r\n    //}\r\n  }\r\n\r\n  function code_format_object(\r\n    parentArr,\r\n    obj,\r\n    level,\r\n    optionalIndex,\r\n    optionalNewLine\r\n  ) {\r\n    let object = Object.entries(obj);\r\n    if (optionalNewLine) {\r\n      parentArr.push({\r\n        output: indent_row(code_format_index(optionalIndex), level)\r\n      });\r\n    }\r\n    parentArr.push({\r\n      output: indent_row(\r\n        (optionalNewLine ? \"\" : code_format_index(optionalIndex)) +\r\n          \"{  Object (\" +\r\n          object.length +\r\n          \")\",\r\n        level + (optionalIndex || optionalNewLine ? 1 : 0)\r\n      )\r\n    });\r\n    object.forEach(([key, value], index) => {\r\n      formatByType(\r\n        parentArr,\r\n        value,\r\n        level + (optionalIndex || optionalNewLine ? 2 : 1),\r\n        key,\r\n        true\r\n      );\r\n    });\r\n\r\n    parentArr.push({\r\n      output: indent_row(\r\n        \"}\",\r\n        level + (optionalIndex || optionalNewLine ? 1 : 0)\r\n      )\r\n    });\r\n  }\r\n\r\n  function code_format_unknown(parentArr, level, optionalIndex) {\r\n    parentArr.push({\r\n      output: indent_row(\r\n        code_format_index(optionalIndex) + \"!!unknown!!\",\r\n        level\r\n      )\r\n    });\r\n  }\r\n\r\n  function code_format_index(optionalIndex) {\r\n    return typeof optionalIndex !== \"undefined\" ? optionalIndex + \": \" : \"\";\r\n  }\r\n\r\n  function indent_row(row, level) {\r\n    return \" \".repeat(level * 3) + row;\r\n  }\r\n\r\n  function formatByType(\r\n    parentArr,\r\n    value,\r\n    level,\r\n    optionalIndex,\r\n    optionalNewLine\r\n  ) {\r\n    if (value === null) code_format_null(parentArr, level, optionalIndex);\r\n    else if (typeof value === \"undefined\")\r\n      code_format_undefined(parentArr, level, optionalIndex);\r\n    else if (typeof value === \"boolean\")\r\n      code_format_boolean(parentArr, value, level, optionalIndex);\r\n    else if (typeof value === \"string\")\r\n      code_format_string(parentArr, value, level, optionalIndex);\r\n    else if (typeof value === \"number\")\r\n      code_format_number(parentArr, value, level, optionalIndex);\r\n    else if (typeof value === \"symbol\")\r\n      code_format_symbol(parentArr, value, level, optionalIndex);\r\n    else if (typeof value === \"function\")\r\n      code_format_function(parentArr, value, level, optionalIndex);\r\n    else if (Array.isArray(value))\r\n      code_format_array(\r\n        parentArr,\r\n        value,\r\n        level,\r\n        optionalIndex,\r\n        optionalNewLine\r\n      );\r\n    else if (typeof value === \"object\")\r\n      code_format_object(\r\n        parentArr,\r\n        value,\r\n        level,\r\n        optionalIndex,\r\n        optionalNewLine\r\n      );\r\n    else code_format_unknown(parentArr, level, optionalIndex);\r\n  }\r\n\r\n  function valueFormatter(object) {\r\n    let parentArr = []; //[{ output: '   test:\"test\"', type: \"string\" }];\r\n    //let test = { test: [\"test\", { test: 1, test2: 2 }], test: 3, test2: 4 };\r\n    /*let test = {\r\n      test0: { test5: 1234 },\r\n      test: \"test\",\r\n      test2: 123,\r\n      test3: [123],\r\n      test4: { test5: 1234 },\r\n      test5: 2,\r\n      test6: \"3\",\r\n      test7: [4, 5, 6]\r\n    };*/\r\n    formatByType(parentArr, object, 0);\r\n\r\n    let str = \"\";\r\n    parentArr.map(\r\n      row =>\r\n        (str += row.output + (row.type ? \" (\" + row.type + \")\" : \"\") + \"\\n\")\r\n    );\r\n    return str;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .tree {\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 0px;\r\n    width: 500px;\r\n    height: 100%;\r\n    background-color: #aaa;\r\n    z-index: 10000000;\r\n    overflow: auto;\r\n    font-size: small;\r\n\r\n    margin: 0;\r\n    font-family: \"Roboto\";\r\n    font-size: 14px;\r\n    line-height: 1.3em;\r\n  }\r\n\r\n  .tree table {\r\n    table-layout: fixed;\r\n    width: 480px;\r\n  }\r\n\r\n  .tree tr:nth-child(odd) {\r\n    background-color: #ccc;\r\n  }\r\n\r\n  .treeVal {\r\n    min-height: 10px;\r\n    overflow-wrap: break-word;\r\n    max-width: 480px;\r\n    overflow: auto;\r\n    background-color: #666 !important;\r\n    color: white;\r\n  }\r\n\r\n  .toggle {\r\n    position: absolute;\r\n    bottom: 25px;\r\n    width: 70px;\r\n    height: 20px;\r\n    text-align: center;\r\n    transform: rotate(-90deg);\r\n    background-color: #aaa;\r\n    z-index: 10000000;\r\n\r\n    margin: 0;\r\n    font-family: \"Roboto\";\r\n    font-size: 14px;\r\n    line-height: 1.3em;\r\n  }\r\n\r\n  .toggleShow {\r\n    right: 475px;\r\n  }\r\n\r\n  .toggleHide {\r\n    right: -25px;\r\n  }\r\n\r\n  .accordion {\r\n    background-color: #666 !important;\r\n    color: white;\r\n  }\r\n\r\n  pre {\r\n    margin: 0px;\r\n  }\r\n</style>\r\n\r\n<div\r\n  class={toggle ? 'toggle toggleShow' : 'toggle toggleHide'}\r\n  on:click={doToggle}>\r\n  {#if toggle}\r\n    Hide\r\n    <i class=\"fas fa-chevron-down\" />\r\n  {:else}\r\n    Show\r\n    <i class=\"fas fa-chevron-up\" />\r\n  {/if}\r\n</div>\r\n{#if toggle}\r\n  <div class=\"tree\">\r\n    <table>\r\n      <colgroup>\r\n        <col style=\"width:35%\" />\r\n        <col style=\"width:10%\" />\r\n        <col style=\"width:55%\" />\r\n      </colgroup>\r\n      {#each testyArr as testy}\r\n        <tr\r\n          class={displayClass(testy)}\r\n          on:click={() => click(testy.key, testy.val, testy.type)}>\r\n          <td>\r\n            {#if displayClass(testy)}\r\n              {#if debugStoreHovered === testy.key}\r\n                <i class=\"fas fa-chevron-down\" />\r\n              {:else}\r\n                <i class=\"fas fa-chevron-right\" />\r\n              {/if}\r\n            {/if}\r\n            {displayVal(testy.val)}\r\n          </td>\r\n          <td>{testy.type}</td>\r\n          <td>{testy.key}</td>\r\n\r\n        </tr>\r\n        {#if debugStoreHovered === testy.key}\r\n          <tr>\r\n            <!-- only used to keep the odd even shading consistent when opening/closing accordion-->\r\n            <td colspan=\"3\" class=\"treeVal\" />\r\n          </tr>\r\n          <tr class=\"treeVal\">\r\n            <td colspan=\"3\" class=\"treeVal\">\r\n              <pre>{valueFormatter(testy.val)}</pre>\r\n            </td>\r\n          </tr>\r\n        {/if}\r\n      {/each}\r\n    </table>\r\n  </div>\r\n{/if}\r\n"
  ],
  "names": [],
  "mappings": "AAoTE,KAAK,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,GAAG,CACV,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,QAAQ,CACjB,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,KAAK,CAEhB,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,QAAQ,CACrB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,KAAK,AACpB,CAAC,AAED,oBAAK,CAAC,KAAK,eAAC,CAAC,AACX,YAAY,CAAE,KAAK,CACnB,KAAK,CAAE,KAAK,AACd,CAAC,AAED,oBAAK,CAAC,iBAAE,WAAW,GAAG,CAAC,AAAC,CAAC,AACvB,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,UAAU,CACzB,SAAS,CAAE,KAAK,CAChB,QAAQ,CAAE,IAAI,CACd,gBAAgB,CAAE,IAAI,CAAC,UAAU,CACjC,KAAK,CAAE,KAAK,AACd,CAAC,AAED,OAAO,eAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,OAAO,MAAM,CAAC,CACzB,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,QAAQ,CAEjB,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,QAAQ,CACrB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,KAAK,AACpB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,KAAK,AACd,CAAC,AAED,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,KAAK,AACd,CAAC,AAED,UAAU,eAAC,CAAC,AACV,gBAAgB,CAAE,IAAI,CAAC,UAAU,CACjC,KAAK,CAAE,KAAK,AACd,CAAC,AAED,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,GAAG,AACb,CAAC"
}